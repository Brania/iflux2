//@flow
import {Map} from 'immutable'

//store构造函数参数
export type StoreOptions = {
  debug: boolean;
};

//校验的规则参数
export type ValidatorOptions = {
  oneError?: boolean;
  debug?: boolean;
  validateFields: Array<string>;
}

//Immutable State
export type IState = Map<string, any>;

//当前的Actor的z状态类型
export type ActorState = Map<string, any>;

//定义redux类型的action
export type ReduxAction = {
  type: string;
};

declare type QueryLang = {
  id: () => number;
  name: () => string;
  lang: () => Object;
  isValidQuery(ql: QueryLang): boolean;
};

declare type ValidatorResult = {
  result: boolean;
  errors: {[key: string]: Array<string>};
}

declare class Actor {
  defaultState(): Object;
}

declare class Store {
  constructor(opts: StoreOptions): void;
  bindActor(): Array<Actor>;
  dispatch(msg: string | ReduxAction, param?: any): void;
  batchDispatch(actions: Array<string | [string, param?: any] | ReduxAction>): void;
  bigQuery(ql: QueryLang): any;
  state(): IState;
}

declare class Atom {
  constructor(record: Object): void;
  value(path: string|Array<String>): IState;
  subscribe(callback: Function): void;
  unsubscribe(callback: Function): void;
}

declare class Validator {
  static validate(
    obj: Object,
    rules: Object,
    options: ValidatorOptions
  ): ValidatorResult;

  static email(value: string): boolean;
  static url(value: string): boolean;
  static date(value: string): boolean;
  static number(value: string): boolean;
  static digits(value: string): boolean;
  static required(value: string): boolean;
  static cardNo(value: string): boolean;
  static qq(value: string): boolean;
  static mobile(value: string): boolean;
  static zipCode(value: string): boolean;

  static phone(value: string): boolean;
  static pwdMix(value: string): boolean;
  static min(param: number, value: string): boolean;
  static max(param: number, value: string): boolean;
  static minLength(param: number, value: string): boolean;
  static maxLength(param: number, value: string): boolean;
  static range(param: [number, number], value: string): string;

  static rangeLength(param: [number, number], val: string): boolean;
  static forbbidenChar(value: string): boolean;
  static addValidator(name: string, callback: Function): void;
}

declare var msg: events$EventEmitter;

declare function QL(
  name: string,
  lang: Array<QL|string|Array<string|number>|Function>|QL
): QueryLang;

declare function DQL(
  name: string,
  lang: Array<DQL|string|Array<string|number>|Function>|DQL
): QueryLang;

declare function Action(name: string): Function;

declare function StoreProvider(
  store: Store,
  opts: StoreOptions
): Function;

declare function Relax(
  Component: ReactClass<{}>
): ReactClass<{}>;

declare var Util: {
  isQuery(ql: any): boolean;
  isArray(arr: any): boolean;
  isFn(fn: any): boolean;
  isStr(str: any): boolean;
  isObject(str: any): boolean;
  type(type: any): string;
};

export {
  Util,
  Actor,
  Action,
  Atom,
  QL,
  DQL,
  Relax,
  Store,
  StoreProvider,
  Validator,
  msg
};
